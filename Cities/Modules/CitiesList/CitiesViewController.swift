//
//  CitiesViewController.swift
//  Cities
//
//  Created by Dima Tsurkan on 9/28/17.
//  Copyright (c) 2017 Dima Tsurkan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CitiesDisplayLogic: class {
    func displayCities(cities: Cities.FetchCities.ViewModel)
    func displayCity(city: Cities.FetchCities.ViewModel.DisplayedCity)
}

class CitiesViewController: UIViewController, CitiesDisplayLogic {
    var interactor: CitiesBusinessLogic?
    var router: (NSObjectProtocol & CitiesRoutingLogic & CitiesDataPassing)?
    
    // MARK: Content
    @IBOutlet weak var detailsFullHeight: NSLayoutConstraint!
    @IBOutlet weak var detailsCompactHeight: NSLayoutConstraint!
    @IBOutlet weak var weatherLabelHeight: NSLayoutConstraint!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var detailsTextView: UITextView!
    @IBOutlet weak var weatherLabel: UILabel!
    @IBOutlet weak var cityInfo: UILabel!
    
    var cities: Cities.FetchCities.ViewModel?
    var currentlyDisplayedCity: Cities.FetchCities.ViewModel.DisplayedCity?

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = CitiesInteractor()
        let presenter = CitiesPresenter()
        let router = CitiesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        configureTable()
        loadCities()
    }
    
    // MARK : Configuration
    
    func configureTable() {
        tableView.register(UINib(nibName: "CityCell", bundle: nil), forCellReuseIdentifier: "CityCell")
        tableView.tableFooterView = UIView()
    }
    
    // MARK: Data
    
    func loadCities() {
        let request = Cities.FetchCities.Request()
        interactor?.loadCities(request: request)
    }
    
    func loadWeather(city: Cities.FetchCities.ViewModel.DisplayedCity) {
        let request = Cities.FetchWeather.Request(city: city)
        interactor?.loadWeather(request: request)
    }
  
    // MARK: Actions

    @IBAction func tapDetails(sender: UITapGestureRecognizer) {
        if detailsFullHeight.isActive {
            detailsFullHeight.isActive = false
            detailsCompactHeight.isActive = true
        } else {
            detailsCompactHeight.isActive = false
            detailsFullHeight.isActive = true
        }
        
        UIView.animate(withDuration: 0.4) { 
            self.view.layoutIfNeeded()
        }
        
    }
  
    func displayCities(cities: Cities.FetchCities.ViewModel) {
        self.cities = cities
        self.tableView.reloadData()
    }
    
    func displayCity(city: Cities.FetchCities.ViewModel.DisplayedCity) {
        if currentlyDisplayedCity?.name == city.name {
            weatherLabel.text = "\(city.weatherDetails!.details)  \(String(describing: city.weatherDetails!.temperature))ºF"
        }
    }
    
    func pickedCity(city: Cities.FetchCities.ViewModel.DisplayedCity) {
        currentlyDisplayedCity = city
        detailsTextView.text = city.details
        cityInfo.text = "\(city.name.capitalized), \(city.countryCode.uppercased())"
        weatherLabel.text = city.weatherDetails != nil ? "\(city.weatherDetails!.details)  \(String(describing: city.weatherDetails!.temperature))ºF" : ""
    }
    
    // MARK: StatusBar style
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
}

extension CitiesViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let selectedCity = (cities?.displayedCities[indexPath.row])!
        pickedCity(city: selectedCity)
        loadWeather(city: selectedCity)
    }
    
}

extension CitiesViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return cities?.displayedCities.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CityCell") as! CityCell
        cell.fill(city: (cities?.displayedCities[indexPath.row])!)
        return cell
    }
}


