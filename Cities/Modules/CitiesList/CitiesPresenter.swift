//
//  CitiesPresenter.swift
//  Cities
//
//  Created by Dima Tsurkan on 9/28/17.
//  Copyright (c) 2017 Dima Tsurkan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON

protocol CitiesPresentationLogic {
    func presentCities(cities: Cities.FetchCities.ViewModel)
    func presentCity(city: Cities.FetchCities.ViewModel.DisplayedCity)
}

class CitiesPresenter: CitiesPresentationLogic {
    weak var viewController: CitiesDisplayLogic?
  
    // MARK: Do something
  
    func presentCities(cities: Cities.FetchCities.ViewModel) {
        viewController?.displayCities(cities: cities)
    }
    
    func presentCity(city: Cities.FetchCities.ViewModel.DisplayedCity) {
        updateCityData(city: city)
        viewController?.displayCity(city: city)
    }
    
    func updateCityData(city: Cities.FetchCities.ViewModel.DisplayedCity) {
        let docsDirectory = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0]
        let docsPath = docsDirectory.appending("/CitiesData.json")
        let jsonData = NSData(contentsOfFile:docsPath)
        var json = JSON(data: jsonData! as Data)
        var list = json["list"].arrayValue
        
        if var cityToUpdate = list.first(where: { (jCity) -> Bool in return jCity["name"].stringValue == city.name }) {
            cityToUpdate["weatherTemp"] = JSON(floatLiteral: Double((city.weatherDetails?.temperature)!))
            cityToUpdate["weatherDetails"] = JSON(stringLiteral: (city.weatherDetails?.details)!)
            let ind = list.index(where: { (jCity) -> Bool in return jCity["name"].stringValue == city.name })!
            list.remove(at: ind)
            list.insert(cityToUpdate, at: ind)
        }
        json["list"] = JSON(list)
        do {
            let dataToWrite = try json.rawData() as NSData?
            if dataToWrite != nil {
                
                if FileManager.default.fileExists(atPath: docsPath) {
                    dataToWrite?.write(toFile: docsPath, atomically: true)
                }
            }
        }
        catch {
            print("writing error")
        }
        
        
    }
    
}
