//
//  CitiesWorker.swift
//  Cities
//
//  Created by Dima Tsurkan on 9/28/17.
//  Copyright (c) 2017 Dima Tsurkan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON
import Moya

class CitiesWorker {
    
    let openWeatherAPIKey = "47cf665c3610eda7296dca74d54a2da9"
  
    func fetchCities() -> Cities.FetchCities.ViewModel? {
        let docsDirectory = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0]
        let docsPath = docsDirectory.appending("/CitiesData.json")
        if !FileManager.default.fileExists(atPath: docsPath) {
            let path = Bundle.main.path(forResource: "CitiesData", ofType: "json")
            let jsonData = NSData(contentsOfFile:path!)
            do {
                 _ = try FileManager.default.copyItem(atPath: path!, toPath: docsPath)
            } catch {}
        }
        let jsonData = NSData(contentsOfFile: docsPath)
        let json = JSON(data: (jsonData as Data?)!)
        let list = json["list"].arrayValue
        var citiesList: [Cities.FetchCities.ViewModel.DisplayedCity] = []
        for item in list {
            let city = Cities.FetchCities.ViewModel.DisplayedCity(name: item["name"].stringValue, countryCode: item["countryCode"].stringValue, details: item["details"].stringValue)
            if let weatherTemp = item["weatherTemp"].float, let weatherDetails = item["weatherDetails"].string {
                city.weatherDetails = Cities.FetchWeather.ViewModel.CityWeather(temperature: weatherTemp, details: weatherDetails)
            }
            citiesList.append(city)
        }
        let cities = Cities.FetchCities.ViewModel(displayedCities: citiesList)
        return cities
    }
    
    func fetchWeather(city: Cities.FetchCities.ViewModel.DisplayedCity, successHandler: @escaping (Cities.FetchWeather.ViewModel.CityWeather) -> Void, failureHandler: @escaping ([String: String]) -> Void) {
        
        let provider = MoyaProvider<WeatherService>()
        provider.request(.getWeather(name: city.name, countryCode: city.countryCode, apiKey: openWeatherAPIKey)) { (result) in
            switch result {
            case let .success(moyaResponse):
                do {
                    let data = moyaResponse.data
                    let json = JSON(data: data)
                    if let tempF = json["main"]["temp"].float, let details = json["weather"][0]["main"].string {
                        
                        let weather = Cities.FetchWeather.ViewModel.CityWeather(temperature: tempF, details: details)
                        successHandler(weather)
                    } else {
                        failureHandler([:])
                    }
                    print("json: \(json)")
                } catch {
                    let data = moyaResponse.data
                    _ = JSON(data: data)
                    print("json: \(error)")
                    failureHandler([:])
                }
            case .failure(_):
                failureHandler([:])
                break
            }
        }
    }
    
    // MARK: - Set the request to the head
    let myEndpointClosure = { (target: WeatherService) -> Endpoint<WeatherService> in
        print("baseURL:\(target.baseURL)\n path:\(target.path)")
        
        let url = target.baseURL.absoluteString + target.path
        
        print("url:\(url)")
        //http://XXXX/api/xlogin.ashx?action=xulogin
        
        
        //This method will escape special characters
        //let url = target.baseURL.appendingPathComponent(target.path).absoluteString
        //http://XXXX/api/xlogin.ashx%3Faction=xulogin
        
        
        let endpoint = Endpoint<WeatherService>(
            url: url,
            sampleResponseClosure: { .networkResponse(200, target.sampleData) },
            method: target.method,
            parameters: target.parameters,
            parameterEncoding: target.parameterEncoding
        )
        
        //Set up your header information
        return endpoint.adding(newHTTPHeaderFields: [:])
        
    }
}
